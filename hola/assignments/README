
The 'assignments' package solves the following problem:

    You have a "centre node" c and its n "neighbour nodes" u0, u1, ..., un-1,
    i.e. the nodes that are connected to it.

    You want to align as many of the neighbours as possible with c, i.e.
    assign them to the four compass directions relative to c.

    Some of the four directions may already be "occupied" (meaning some of
    the ui are already aligned with c in those directions).

    You are not allowed to change the cyclic ordering of the ui relative to c.

    You want to know the "least-cost" assignment, where cost is measured
    by total angular displacement of the neighbours ui.

    If you attempt to create the least-cost assignment but it fails (due
    to existing constraints on the graph), then you want to know the
    second-least-cost assignment, so you can try that one, and so on.


TERMINOLOGY

In computer graphics the positive x-axis extends to the right, and the positive
y-axis extends downward. Therefore the four quadrants are enumerated like this:

                            |
                        Q2  |  Q3
                      ------+------
                        Q1  |  Q0
                            |

and the semiaxes like this:

                            S3
                            |
                    S2 -----+----- S0
                            |
                            S1

and clockwise is always taken as the positive direction of rotation.


DISTRIBUTIONS

The problem described in the introduction (the "Assignment Problem") can be
defined by saying how many of the neighbours ui lie in each quadrant relative to
centre node c (zero or more per quadrant), and how many have been assigned
already to any of the semiaxes (zero or one per semiaxis).

We begin by forgetting about the semiaxes and considering just the question of
how many neighbours lie in each quadrant. (This is the "open" quadrant, in the
topological sense.) If for example there were 4 neighbours in quadrant Q0, none
in Q1, 2 in Q2 and 1 in Q3, this could be described by the vector (4, 0, 2, 1).
We refer to such a vector as a _distribution_.

Our first observation is that since we are not allowed to alter the cyclic
ordering of the neighbours, at most two nodes in each quadrant can be
important, namely, the two outermost ones. These are the only ones that can
possibly be assigned to a semiaxis. Therefore we can turn any given
distribution into what we call a _reduced distribution_ by replacing any number
greater than 2 with 2 itself. Thus the previous example becomes (2, 0, 2, 1).
A reduced distribution indicates how many "alignment candidates" there are in
each quadrant. There are only 3^4 = 81 possible reduced distributions.

Our second observation is that, for any given reduced distribution, the
combinatorial problem we face is equivalent up to flips and rotations. In
algebraic terms, this means that we want to "mod out" by the dihedral group D4.
In order to achieve this we need to pick a canonical representative of each
equivalence class, and for this we introduce the notion of an _oriented reduced
distribution_.

Defn: Let a reduced distribution d = (d0, d1, d2, d3) be given. Then d
      is said to be _oriented_ when:

            (1) d0 is minimal,

            (2) d1 <= d3, and

            (3) (d0 < d1) or (d2 <= d3).

The definition is designed to approximate as closely as posible the condition
that the entries of an oriented distribution go in ascending order; it is also
designed so that each equivalence class under the permutations of D4 has a
unique oriented element. We prove this below. First we need some definitions
and a claim.

Defn: Two distributions d, d' are _equivalent_ if there exists a
      permutation phi in D4 such that d' = phi d.

Defn: The _content_ of a distribution is a vector <a, b, c> indicating how
      many 0's, 1's, and 2's are in the distribution. E.g. the content of
      (0, 1, 1, 1) is <1, 3, 0> because the distribution has one 0, three 1's,
      and no 2's.

Claim: There are exactly 20 nonzero oriented reduced distributions, and they
are as follows:

                                (0,0,0,1),
                                (0,0,0,2),
                                (0,0,1,1),
                                (0,1,0,1),
                                (0,0,1,2),
                                (0,1,0,2),
                                (0,0,2,2),
                                (0,2,0,2),
                                (0,1,1,1),
                                (0,1,1,2),
                                (0,1,2,1),
                                (0,1,2,2),
                                (0,2,1,2),
                                (0,2,2,2),
                                (1,1,1,1),
                                (1,1,1,2),
                                (1,1,2,2),
                                (1,2,1,2),
                                (1,2,2,2),
                                (2,2,2,2)

(We only care about nonzero distributions, because in the zero case there is
nothing to be done, i.e. no possible node alignments to be made.) The proof of
the claim is a simple matter of checking cases, which is best managed according
to content. That is, first consider all reduced distributions of content <3, 1,
0>, then <2, 2, 0>, then <1, 3, 0>, and so on, in logical order up to <0, 0, 4>.
You will find that the twenty listed above are the only ones.

Finally we can prove the...

Theorem: Every reduced distrubtion is equivalent to exactly one oriented
         reduced distribution.

Proof:

The existence part of the proof is easy: we give an algorithm to orient any
reduced distribution by composing elements of D4:

    Step 1: Rotate so that d0 is minimal.

    Step 2: If d3 < d1, flip over the main diagonal (i.e. the one passing
            through quadrants Q0 and Q2).

    Step 3: If d1 = d0 and d2 > d3, flip over the vertical axis.

For uniqueness, let any oriented reduced distribution ("ORD" henceforth) d be
given. We want to show there is no phi in D4 that maps d to another ORD. But it
is clear that whatever permutation phi is chosen, phi d must have the same
content as d. And examining the list of the twenty ORDs above, we find that
there are precisely six pairs of ORDs having the same content:

    0011
    0101

    0012
    0102

    0022
    0202

    0112
    0121

    0122
    0212

    1122
    1212

and in every case the one is obtained from the other by the "twist" permutation
(abcd) |--> (acbd), or a rotation thereof, which does /not/ belong to the
dihedral group D4. This establishes uniqueness. QED



PROBLEM INPUT

An instance of the Assignment Problem is to be specified as follows:

    (1) You give the relative coordinates (dx, dy) of each neighbour node ui
        relative to the central node c.

    (2) You say which of the semiaxes is free (unoccupied).



"QUAD ACTIONS"

A "quad action" is a solution to the assignment problem. For each of the four
quadrants, it specifies an action, indicated by a code letter:

    Char Meaning
    ---- -------
    A    "Anticlockwise": assign the node nearest the anticlockwise end
                          of the quadrant to that semiaxis. E.g. in Q0 the
                          node nearest semiaxis 0 gets assigned to it.
    B    "Both": do both the Clockwise and Anticlockwise assignments.
    C    "Clockwise": assign the node nearest the clockwise end of the
                      quadrant to that semiaxis. E.g. in Q0 the node
                      nearest semiaxis 1 gets assigned to it.
    D    "Do Nothing"


Thus a quad action is a sequence of four of these code letters,
indicating what should happen in quadrants Q0, Q1, Q2, Q3, respectively. 

For example, suppose the picture looks like this:

                            *
                        *   |  *
                       *    |   
                      ------+------
                       *    |   *
                        *   |
                         *

so that the distribution is (1, 3, 2, 1), and the reduced distribution is
(1, 2, 2, 1). Semiaxis S3 is occupied, but all others are free.

In this case the quad action "DAAC" says to do nothing in Q0, to assign the
anti-clockwise-most node in quadrant Q1 to semiaxis S1, and so forth, resulting
in the following picture:

                            *
                        *   |   
                            |   
                     *------+------*
                       *    |   *
                        *   |
                            *

On the other hand, the quad action "DACC" would be illegal in the given
situation, since it tries to put the clockwise-most node from quadrant Q2 onto
semiaxis S3, which is already occupied.



SOLUTION METHOD

The solution can be broken down into three components: combinatorial,
geometric, and algebraic.


COMBINATORIAL COMPONENT:

The combinatorial part of the solution can be (and has been) solved once and for
all. This is to determine for each of the twenty ORDs, and for each possible
set of vacant semiaxes, all legal quad actions. We have solved this problem in
the genQAs module, and generated once and for all a lookup table for it.


GEOMETRIC COMPONENT:

The geometric component of the solution is to take the given offsets (dx, dy)
of the neighbour nodes from the central node, and generate from these the
following quantities:

    (*) the distribution vector (i.e. number of nodes in each quadrant);

    (*) the set of vacant semiaxes (or this can be generated from the set
        of constraints currently applied to the graph);

    (*) for each possible quad action, a cost.


ALGEBRAIC COMPONENT:

Given the actual distribution of neighbour nodes, we first turn this into a
reduced distribution, and then we compute the permutation phi in D4 that maps
this to an oriented reduced distribution. For this we use the algorithm given
in the proof of the theorem above. We also compute the corresponding
permutation sigma on the semiaxes, which generally is not the same as phi. For
example, if phi is the flip over the vertical axis, i.e. the product of
transpositions (Q0 Q1)(Q3 Q2), then sigma is the transposition (S0 S2).

We then essentially conjugate the lookup table (from the combinatorial part of
the solution) by these permutations (phi, sigma).  That is, we use these
permutations to map the given problem into an entry in the lookup table, and
then we apply the inverses of these permutations to the quad actions from that
entry in order to make them applicable to the given problem.


This is a high-level description of the solution method. For details, examine
the modules in this package.

